SAMPLES=["GCA_000798715.1_ASM79871v1_protein"]

rule all:
   input:
      "db/merops_scan_lib_ascii.fasta.phr",
      "db/TCDB.fasta.phr",
      "db/dbCAN.txt",
      expand("blast_out/{sample}_merops.txt", sample=SAMPLES),
      expand("blast_out/{sample}_tcdb.txt", sample=SAMPLES),
      expand("blast_parsed/{sample}_tcdb_parsed.txt", sample=SAMPLES),
      expand("blast_parsed/{sample}_merops_parsed.txt", sample=SAMPLES),
      expand("signalp/{sample}_signalp.txt", sample=SAMPLES),
      expand("dbcan/{sample}", sample=SAMPLES),
      



#===== Getting Databases =======
rule download_merops_db:
   output: "db/merops_scan_lib.fasta"
   shell: """
      curl -L ftp://ftp.ebi.ac.uk/pub/databases/merops//old_releases/merops120/merops_scan.lib -o {output}
   """

# getting rid of non-ASCII characters in the header lines
rule remove_nonascii:
   input: "db/merops_scan_lib.fasta"
   output: "db/merops_scan_lib_ascii.fasta"
   shell: """
      perl -p -e 's/[^[:ascii:]]//g' {input} > {output}
   """

rule download_tcdb:
   output: "db/TCDB.fasta"
   shell: """
      curl -L http://www.tcdb.org/public/tcdb -o {output}
   """


rule download_dbcan:
   conda: "env.yml"
   output: "db/dbCAN.txt"
   shell: """
      pip install run-dbcan==2.0.11
      mkdir -p db
      cd db \
      && wget http://bcb.unl.edu/dbCAN2/download/CAZyDB.07312019.fa.nr && diamond makedb --in CAZyDB.07312019.fa.nr -d CAZy \
      && wget http://bcb.unl.edu/dbCAN2/download/Databases/dbCAN-HMMdb-V8.txt && mv dbCAN-HMMdb-V8.txt dbCAN.txt && hmmpress dbCAN.txt \
      && wget http://bcb.unl.edu/dbCAN2/download/Databases/tcdb.fa && diamond makedb --in tcdb.fa -d tcdb \
      && wget http://bcb.unl.edu/dbCAN2/download/Databases/tf-1.hmm && hmmpress tf-1.hmm \
      && wget http://bcb.unl.edu/dbCAN2/download/Databases/tf-2.hmm && hmmpress tf-2.hmm \
      && wget http://bcb.unl.edu/dbCAN2/download/Databases/stp.hmm && hmmpress stp.hmm
   """

#===============================

#====== Building BLAST dbs =====
rule makeblastb_merops:
   conda: "env.yml"
   input: "db/merops_scan_lib_ascii.fasta"
   output: "db/merops_scan_lib_ascii.fasta.phr", "db/merops_scan_lib_ascii.fasta.pin", "db/merops_scan_lib_ascii.fasta.psq"
   shell: """
      makeblastb -in {input} -dbtype prot
   """


rule makeblastb_tcdb:
   conda: "env.yml"
   input: "db/TCDB.fasta"
   output: "db/TCDB.fasta.phr", "db/TCDB.fasta.pin", "db/TCDB.fasta.psq"
   shell: """
      makeblastb -in {input} -dbtype prot
   """
#============================




#===== Run BLAST searches ======
rule blast_merops:
   conda: "env.yml"
   input: db="db/merops_scan_lib_ascii.fasta", fasta="data/{sample}.faa", db_part="db/merops_scan_lib_ascii.fasta.phr"
   output: "blast_out/{sample}_merops.txt"
   shell: """
      blastp  \
      -query {input.fasta} \
      -db {input.db} \
      -outfmt "6 qseqid sseqid pident qstart qend sstart send qlen slen evalue" \
      -evalue 1e-10 \
      -max_target_seqs 5 \
      -max_hsps 1 \
      -num_threads 4 \
      -out {output}
   """

rule blast_tcdb:
   conda: "env.yml"
   input: db="db/TCDB.fasta", fasta="data/{sample}.faa", db_part="db/TCDB.fasta.phr"
   output: "blast_out/{sample}_tcdb.txt"
   shell: """
      blastp  \
      -query {input.fasta} \
      -db {input.db} \
      -outfmt "6 qseqid sseqid pident qstart qend sstart send qlen slen evalue" \
      -evalue 1e-10 \
      -max_target_seqs 5 \
      -max_hsps 1 \
      -num_threads 4 \
      -out {output}
   """


#===============================




#? Need to filter by query coverage and % identity?
#===== Pase BLAST output ======
rule parse_blast_tcdb:
   input: "blast_out/{sample}_tcdb.txt"
   output: "blast_parsed/{sample}_tcdb_parsed.txt"
   shell: """
      cut -f 1 {input} | sort -u | while read ID; do grep -w -m1 ^$ID {input} | cut -f 2 | awk -v ID="$ID" -v FS="|" '{{print ID"\t"$NF}}'; done > {output}
   """

rule parse_blast_merops:
   input: blast_out="blast_out/{sample}_merops.txt", db="db/merops_scan_lib_ascii.fasta"
   output: "blast_parsed/{sample}_merops_parsed.txt"
   shell: """
      cut -f 1 {input.blast_out} | sort -u | while read ID; do grep -w -m1 ^$ID {input.blast_out} | cut -f 2 | while read TARGET; do grep -m1 -w $TARGET {input.db} | awk -v ID="$ID" -v FS="#" '{{print ID"\t"$2}}'; done; done > {output}
   """
#==============================




#========= SignalP ============
#NOTE: signalP has restrictions about ditribution. Have it installed beforehand.
rule signalp:
   input: "data/{sample}.faa"
   output: "signalp/{sample}_signalp.txt"
   shell: """
      PATH=$PATH:/home/azacca/programs/signalp-5.0b/bin/ 
      signalp -fasta {input} -org euk -stdout > {output}
   """
#==============================




#============ dbcan ===========
rule run_dbcan:
   conda: "env.yml"
   input: fasta="data/{sample}.faa", dbok="db/dbCAN.txt"
   output: directory("dbcan/{sample}")
   shell: """
      run_dbcan.py {input.fasta} protein  --out_dir {output}
   """
#==============================


